# Uncomment to profile zsh startup
# Source: https://stevenvanbael.com/profiling-zsh-startup
# zmodload zsh/zprof

# -----------------
# Zsh Configuration
# -----------------
bindkey -v  # Set the editor default keymap to emacs (`-e`) or vi (`-v`)
SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '  # Customize the spelling correction prompt.
WORDCHARS=${WORDCHARS//[\/]}  # Remove path separator from WORDCHARS.

# The detailed meaning of the below three variables can be found in `man zshparam`.
export HISTFILE=~/.zsh_history
export HISTSIZE=1000000  # Number of items for the internal history list
export SAVEHIST=1000000  # Maximum number of items for the history file

# You can set one of the optional three formats:
# "mm/dd/yyyy" | "dd.mm.yyyy" | "yyyy-mm-dd"
# or set a custom format using the strftime function format specifications.
# See 'man strftime' for details.
export HIST_STAMPS="yyyy-mm-dd"

# The meaning of these options can be found in the man page of `zshoptions`.
setopt CORRECT  # Prompt for spelling correction of commands.
setopt EXTENDED_GLOB  # Treat `#`, `~`, and `^` as patterns for filename globbing.
setopt EXTENDED_HISTORY  # Write the history file in the ":start:elapsed;command" format.
setopt HIST_FIND_NO_DUPS  # Don't display duplicates when searching the history.
setopt HIST_IGNORE_ALL_DUPS  # Do not put duplicated commands into the history list.
setopt HIST_IGNORE_DUPS  # Don't enter immediate duplicates into the history.
setopt HIST_IGNORE_SPACE  # Don't record an entry starting with a space.
setopt HIST_REDUCE_BLANKS  # Remove unnecessary blanks.
setopt HIST_SAVE_NO_DUPS  # Do not save duplicated commands.
setopt HIST_VERIFY  # Don't execute the command directly upon history expansion.
setopt INC_APPEND_HISTORY  # Write to the history file immediately, not when the shell exits.
setopt INTERACTIVE_COMMENTS  # Allow comments starting with `#` in the interactive shell.
setopt LONG_LIST_JOBS  # List jobs in verbose format by default.
setopt NO_BG_NICE  # Prevent background jobs from being given a lower priority.
setopt NO_CHECK_JOBS  # Prevent status report of jobs on shell exit.
setopt NO_CLOBBER  # Disallow `>` to overwrite existing files. Use `>|` or `>!` instead.
setopt NO_HUP  # Prevent SIGHUP to jobs on shell exit.
setopt PUSHD_IGNORE_DUPS  # Don't push multiple copies of the same directory to the stack.
setopt PUSHD_SILENT  # Don't print the directory stack after pushd or popd.
setopt PUSHD_TO_HOME  # Have pushd without arguments act like `pushd ${HOME}`.
setopt SHARE_HISTORY  # Share history between all sessions.

# -----------------
# Zim Configuration
# -----------------

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

# zsh-syntax-highlighting
# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
# typeset -A ZSH_HIGHLIGHT_STYLES
# ZSH_HIGHLIGHT_STYLES[comments]='fg=242'

# -----------------
# Personal Configuration
# -----------------

# ---- Color Config ----
# export GREP_COLOR='1;33;40'
# Base16 Shell
# BASE16_SHELL="$HOME/.config/base16-shell/"
# [ -n "$PS1" ] && \
#     [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
#         source "$BASE16_SHELL/profile_helper.sh"
# base16_material-vivid
# "$HOME/.config/base16-shell/scripts/base16-material-vivid.sh" material-vivid
# if command -v dircolors &> /dev/null; then
#   test -e ~/.dircolors && eval $(dircolors -b ~/.dircolors)
# fi

source $HOME/.aliases

# -----------------
# Zimfw Initialization
# -----------------

# Initialize modules
ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim

# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi

# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi

# Load modules
source ${ZIM_HOME}/init.zsh
# zsh-history-substring-search
zmodload -F zsh/terminfo +p:terminfo

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}); do
  bindkey ${key} history-substring-search-up
done
for key ('^[[B' '^N' ${terminfo[kcud1]}); do
  bindkey ${key} history-substring-search-down
done
for key ('k'); do
  bindkey -M vicmd ${key} history-substring-search-up
done
for key ('j'); do
  bindkey -M vicmd ${key} history-substring-search-down
done
unset key

eval "$(uv generate-shell-completion zsh)"
_uv_run_mod() {
    if [[ "$words[2]" == "run" && "$words[CURRENT]" != -* ]]; then
        _arguments '*:filename:_files'
    else
        _uv "$@"
    fi
}
compdef _uv_run_mod uv

# -----------------
# Starship Initialization
# The starship init must be the last entry in this file
# -----------------
eval "$(starship init zsh)"

# Uncomment to profile zsh startup
# zprof
